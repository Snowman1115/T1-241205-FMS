package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.fms.common.constants.ResultConstants;
import com.fms.common.result.Result;
import com.fms.exception.ServiceException;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import java.util.List;

import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * $!{table.comment} Controller
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Resource
    private ${table.serviceName} ${table.entityPath}Service;

    /**
     * Get All ${entity}
     * @return Result
     */
    @GetMapping
    public Result getAll${entity}() {
        return Result.success(${table.entityPath}Service.list());
    }

    /**
     * Get ${entity} By Id
     * @param id
     * @return Result
     */
    @GetMapping("/{id}")
    public Result getUserById(@PathVariable Integer id) {
        return Result.success(${table.entityPath}Service.getById(id));
    }

    /**
     * Save Or Update ${entity}
     * @param ${table.entityPath}
     * @return Result
     */
    @PostMapping
    public Result save(@RequestBody ${entity} ${table.entityPath}) {
        try {
            ${table.entityPath}Service.save(${table.entityPath});
            return Result.success(null, "${table.entityPath} Saved Successfully");
        } catch (Exception e) {
            throw new ServiceException(ResultConstants.INTERNAL_SERVER_ERROR, "Server Error, Failed to Save ${table.entityPath}. Please Try Again.");
        }
    }

    /**
     * Update ${entity}
     * @param ${table.entityPath}
     * @return Result
     */
    @PutMapping
    public Result update(@RequestBody ${entity} ${table.entityPath}) {
        if (${table.entityPath}Service.updateById(${table.entityPath})) {
            return Result.success(null, "${entity} Updated Successfully");
        }
        throw new ServiceException(ResultConstants.NOT_FOUND, "Update Fail, ${entity} Not Found. Please Try Again.");
    }

    /**
     * Delete Specific ${entity}
     * @param id
     * @return Result
     */
    @DeleteMapping("/{id}")
    public Result delete(@PathVariable Integer id) {
        if (${table.entityPath}Service.removeById(id)) {
            return Result.success(ResultConstants.OK,"${entity} Removed Successfully");
        }
        return Result.error(ResultConstants.INTERNAL_SERVER_ERROR,"Server Error, Failed to Delete ${entity}. Please Try Again.");
    }

    /**
     * Batch Delete ${entity}
     * @param ids
     * @return Result
     */
    @DeleteMapping("/del/batch/{ids}")
    public Result delete(@PathVariable List<Integer> ids) {
        if (${table.entityPath}Service.removeByIds(ids)) {
            return Result.success(ResultConstants.OK,"${entity}s Removed Successfully");
        }
        return Result.error(ResultConstants.INTERNAL_SERVER_ERROR,"Server Error, Failed to Remove  ${entity}s. Please Try Again.");
    }

    /**
     * Page Query
     * @param pageNum
     * @param pageSize
     * @return Result
     */
    @GetMapping("/page")
    public Result getPage(@RequestParam Integer pageNum,
                          @RequestParam Integer pageSize) {
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
        queryWrapper.orderByDesc("id");
        return Result.success(${table.entityPath}Service.page(new Page<>(pageNum,pageSize), queryWrapper));
    }

}

#end